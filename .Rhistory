#  hist(breaks = 100)
#Visualization function
sampling_visual <- function(env_df, sample_out, sample_size = 1000){
gg_sample_evennes <- function(env_df, skew_samp, uni_samp){
require(ggplot2)
env_df%>%
ggplot(aes(x = env1, y = ..scaled..))+geom_density()+
geom_density(data = skew_samp, aes(x = env1, y = ..scaled..), fill = 'red', alpha = 0.3)+
geom_density(data = uni_samp, aes(x = env1, y = ..scaled..), fill = 'blue',alpha = 0.3)+
theme_classic()
}
skew_samp <- sample(x = sample_out$env1, size = sample_size, replace = TRUE)%>%
data.frame(env1 = .)
uni_samp <- sample(x = sample_out$env1, size = sample_size, replace = TRUE, prob = samp_even$skew_prob)%>%
data.frame(env1 = .)
p <- gg_sample_evennes(env_df = env_df, skew_samp = skew_samp, uni_samp = uni_samp)
samples <- data.frame(random = uni_samp$env1, skew = skew_samp$env1)
out <- list(p, samples)
return(out)
}
#Example:
#samp_even <- sampling_eveness(env_df = env_df, shape1 = 0.8)
#sampling_visual(env_df = env_df, sample_out = samp_even, sample_size = 100)
###############################################################
#2. Species optima: i) Skew, ii) Random
#Note: 1) restrict optima within a range, 2) is set PRIOR to metacommunity simulation
###############################################################
optima_distribution <- function(no.spe, skew = c('left','right')){
#Skew: left or right
if(skew == 'left'){
skew_optim <- rbeta(no.spe, shape1 = 1.5, shape2 = 5)
}else if(skew == 'right'){
skew_optim  <- rbeta(no.spe, shape1 = 5, shape2 = 1.5)
}else{
stop("Specify skew direction")
}
#uniform
uni_optim <- runif(no.spe)
#normal
norm_optim <- rnorm(no.spe)%>%
scales::rescale(to = c(0,1))
out <- list(skew = skew_optim, uniform = uni_optim, normal = norm_optim)
return(out)
}
###############################################################
#3. Species pool: i) Non saturated, ii) Saturated
#Unsaturated/Linear  - sample 50% of species pool (Manthey & Fridley 2008)
#Saturated/Curvelinear - sample 50 individuals
#Note: this is done AFTER metacommunity simulation
###############################################################
saturation_sampling <- function(dynamics.df, k = 0.5, individuals = 100){
#convert to matrix
community_mat_fun <- function(dynamics.df){
#converts simmulate_MC output into sampleXspecies matrix with time points split into list elements
require(dplyr)
require(tidyr)
comm_mat <- dynamics.df%>%
filter(time > 0)%>%
select(time, patch, env, N, species)%>%
pivot_wider(id_cols = c(patch, env, time), names_from = species, values_from = N, values_fill = 0)
return(comm_mat)
}
sampleXspecies <- dynamics.df%>%
community_mat_fun
spe_comp <- sampleXspecies%>%
select(-1:-3)
env_gradient <- sampleXspecies%>%
select(1:2)
#i) Sampling by species
unsaturated_comm <- function(spe_comp, k = 0.5){
require(dplyr)
require(vegan)
#presnce absence
spe_pa <- spe_comp>0
#probabilities (relative abundances)
sp_prob <- vegan::decostand(spe_comp,method = 'total')
sp_prob_gradient <- list()
for(i in seq(nrow(sp_prob))){
sp_prob_gradient[[i]] <- sp_prob[i,][spe_pa[i,]]
}
#Species pool along gradient (species IDs)
sp_pool_gradient <- sp_prob_gradient%>%
lapply(names)
#Species pool size along gradient (# of species)
sp_pool_size_gradient <- sp_prob_gradient%>%
lapply(length)
#Subsample a fraction (k) of species pool: fraction is set as mean of poisson variable
subsample_pool_n <- function(k = 0.5, pool_size){
subset_size <- round(k * pool_size) #no stochasticity to ensure subset size always smaller than pool
return(subset_size)
}
sp_fraction <- sp_pool_size_gradient%>%
lapply(function(x)subsample_pool_n(pool_size = x, k = k))
#metrics
#metrics <- list(spe_pool = unlist(sp_pool_gradient),
#                pool_size = unlist(sp_pool_size_gradient),
#                sp_prob = unlist(sp_fraction))
#unstaurated community output
out <- mapply(x = sp_pool_gradient, y = sp_fraction, z = sp_prob_gradient,
function(x,y,z)sample(x = x, size = y, replace = FALSE, prob = z))%>%
lapply(table)%>%
bind_rows()%>%
mutate_all(~replace(., is.na(.), 0))%>%
as.data.frame
#out.list <- list(unsaturated_comm  = out, metrics = metrics)
return(out)
}
#ii) Sampling by individuals
saturated_comm <- function(spe_comp, individuals = 100){
require(dplyr)
#Presence/absence
spe_pa <- spe_comp>0
#Species abundances
sp_abund_gradient <- list()
for(i in seq(nrow(spe_pa))){
sp_abund_gradient[[i]] <- spe_comp[i,][spe_pa[i,]]
}
#Species pool
sp_pool_gradient <- sp_abund_gradient%>%
lapply(names)
#convert to number of individuals
sp_individual_gradient <- mapply(x = sp_pool_gradient, y = sp_abund_gradient, function(x,y)rep(x = x, times = y))
#Subsample by individuals
#convert to number of individuals
community_individuals <- sp_individual_gradient%>%
lapply(function(x)sample(x, size = individuals, replace = TRUE))%>%
lapply(table)%>%
bind_rows%>%
mutate_all(~replace(., is.na(.), 0))%>%
as.data.frame
return(community_individuals)
}
#pars <- list(k = k, individuals = 100)
#list_funs <- list(unsaturated_comm, saturated_comm)
unsat_comm <- spe_comp%>%
unsaturated_comm(spe_comp = ., k = k)
sat_comm <- spe_comp%>%
saturated_comm(individuals = individuals)
out <- list(unsaturated = unsat_comm, saturated = sat_comm, env_gradient = env_gradient)
return(out)
}
source('C:/Users/guest1211/Desktop/Will\'s R/theta-cooccurence/post-processing.R')
source('C:/Users/guest1211/Desktop/Will\'s R/theta-cooccurence/post-processing.R')
dynamics.df.all
theta.output
#Parallelize
library(parallel)
theta
metrics
theta.out <- c()
clusterExport (cl, c ('theta.out', 'spec.comp','metrics'))
theta.output <- parLapply(cl, spec.comp, function(x){
#loop through metrics and apply each to theta function
for (j in rownames(metrics)){
theta.out[[j]] <- genspe::calculate.theta(x,
method = metrics[j,"method"],
beta.div.method = metrics[j,"beta.div.method"],
beta.div.sqrt.D = metrics[j, "beta.div.sqrt.D"],
force.subsample = metrics[j, "force.subsample"],
reps =100)}
#bind rows with new column as metric name
out <- dplyr::bind_rows(theta.out, .id = 'metric')
return(out)
})
################################################
#Saturated VS Unsatturated communities ----------------
################################################
#saturation_sampling
master_tibble
master_tibble
theta.output
#combine fundmanetal and theta tables
theta_fundamental <- mapply(x = theta.output, y = fundamental, FUN = function(x,y)x%>%
rename('species' = `sci.name`)%>%
left_join(y, by = 'species'), SIMPLIFY = FALSE)
#combined theta-fundamental table into master nested tibble -------
#create a theta tibble with the same optima disitrbution and simulation variables as master tibble
theta_tibble <- tibble(optima_distribution = dynamics.df.all$optima_distribution,
simulation = dynamics.df.all$simulation,
theta_metrics = theta_fundamental)
spec.comp
dynamics.df.all
dynamics.df.all$data[[1]]
saturation_sampling
dynamics.df.all$data[[1]]%>%
saturation_sampling(dynamics.df = .)
unsaturated_comm <- dynamics.df.all$data%>%
lapply(FUN = function(x)saturation_sampling(dynamics.df = x, k = 0.5, individuals = 100))
unsaturated_comm
unsaturated_comm[[1]]
unsaturated_comm[[1]]$unsaturated
unsaturated_by_spp <- lapply(unsaturated_comm, function(x)x$unsaturated)
unsaturated_by_spp
unsaturated_comm[[1]]$saturated
unsaturated_by_spp <- lapply(unsaturated_comm, function(x)x$unsaturated)
saturated_by_ind <- lapply(unsaturated_comm, function(x)x$saturated)
unsaturated_by_spp
dynamics.df.all$simulation
un_saturated_tibble <- tibble(optima_distribution = dynamics.df.all$optima_distribution,
simulation = dynamics.df.all$simulation,
unaturated = lapply(unsaturated_comm, function(x)x$unsaturated),
saturated = lapply(unsaturated_comm, function(x)x$saturated))
un_saturated_tibble
spec.comp
un_saturated_tibble$unaturated[[1]]
un_saturated_tibble$unaturated[[1]]%>%class
?rename
?purrr::set_names
un_saturated_tibble$unaturated[[1]]%>%
purrr::set_names(., nm = paste0('Sp',.))
un_saturated_tibble$unaturated[[1]]
un_saturated_tibble$unaturated[[1]]%>%
purrr::set_names(., nm = .))
un_saturated_tibble$unaturated[[1]]%>%
purrr::set_names(., nm = .)
?setNames
un_saturated_tibble$unaturated[[1]]%>%
rename_all(~paste0('Sp', .x))
theta.out
theta.output
un_saturated_tibble$unaturated[[1]]%>%
rename_all(~paste0('sp', .x))
unsaturated_comm
)
)
un_saturated_tibble <- tibble(optima_distribution = dynamics.df.all$optima_distribution,
simulation = dynamics.df.all$simulation,
unaturated = lapply(unsaturated_comm, function(x)x$unsaturated)%>%
lapply(., function(x)rename_all(~paste0('sp', .x))),
saturated = lapply(unsaturated_comm, function(x)x$saturated%>%
lapply(., function(x)rename_all(~paste0('sp', .x)))))
un_saturated_tibble$unaturated%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x)))
un_saturated_tibble <- tibble(optima_distribution = dynamics.df.all$optima_distribution,
simulation = dynamics.df.all$simulation,
unaturated = lapply(unsaturated_comm, function(x)x$unsaturated)%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x))),
saturated = lapply(unsaturated_comm, function(x)x$saturated%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x)))))
lapply(unsaturated_comm, function(x)x$unsaturated)%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x)))
lapply(unsaturated_comm, function(x)x$saturated)%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x)))
un_saturated_tibble <- tibble(optima_distribution = dynamics.df.all$optima_distribution,
simulation = dynamics.df.all$simulation,
unaturated = lapply(unsaturated_comm, function(x)x$unsaturated)%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x))),
saturated = lapply(unsaturated_comm, function(x)x$saturated)%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x))))
un_saturated_tibble
#Parallelize
parallel_theta <- function(spe_comp, metrics){
require(parallel)
cl <- makeCluster (6)
theta.out <- c()
spec.comp <- spe_comp
clusterExport (cl, c ('theta.out', 'spec.comp','metrics'))
theta.output <- parLapply(cl, spec.comp, function(x){
#loop through metrics and apply each to theta function
for (j in rownames(metrics)){
theta.out[[j]] <- genspe::calculate.theta(x,
method = metrics[j,"method"],
beta.div.method = metrics[j,"beta.div.method"],
beta.div.sqrt.D = metrics[j, "beta.div.sqrt.D"],
force.subsample = metrics[j, "force.subsample"],
reps =100)}
#bind rows with new column as metric name
out <- dplyr::bind_rows(theta.out, .id = 'metric')
return(out)
})
stopCluster (cl)
}
metrics
un_saturated_tibble
#long tibble
un_saturated_tibble%>%
pivot_longer(cols = 3:4)
#long tibble
un_saturated_tibble%>%
pivot_longer(cols = 3:4, names_to = spe_comp)
#long tibble
un_saturated_tibble%>%
pivot_longer(cols = 3:4, names_to = 'spe_comp')%>%
mutate(theta.out = parallel_theta(spe_comp = value,))
#long tibble
un_saturated_theta <- un_saturated_tibble%>%
pivot_longer(cols = 3:4, names_to = 'spe_comp')%>%
mutate(theta.out = parallel_theta(spe_comp = spe_comp, metrics = metrics))
#long tibble
un_saturated_theta <- un_saturated_tibble%>%
pivot_longer(cols = 3:4, names_to = 'spe_comp')%>%
mutate(theta.out = parallel_theta(spe_comp = spe_comp, metrics = metrics)%>%
nest())
unsaturated_theta <- un_saturated_tibble$unaturated%>%
parallel_theta(., metrics = metrics)
unsaturated_theta
#Parallelize
parallel_theta <- function(spe_comp, metrics){
require(parallel)
cl <- makeCluster (6)
theta.out <- c()
spec.comp <- spe_comp
clusterExport (cl, c ('theta.out', 'spec.comp','metrics'))
theta.output <- parLapply(cl, spec.comp, function(x){
#loop through metrics and apply each to theta function
for (j in rownames(metrics)){
theta.out[[j]] <- genspe::calculate.theta(x,
method = metrics[j,"method"],
beta.div.method = metrics[j,"beta.div.method"],
beta.div.sqrt.D = metrics[j, "beta.div.sqrt.D"],
force.subsample = metrics[j, "force.subsample"],
reps =100)}
#bind rows with new column as metric name
out <- dplyr::bind_rows(theta.out, .id = 'metric')
return(out)
})
stopCluster (cl)
return(theta.output)
}
un_saturated_tibble
cor_table%>%
group_by(optima_distribution, metric)%>%
summarise(mean_correlation = mean(correlation), sd_correlation = sd(correlation))%>%
ggplot(aes(x = metric, y = mean_correlation, col = optima_distribution)) +
geom_bar(aes(fill = optima_distribution), position = position_dodge(), stat = 'identity')+
scale_fill_manual(values = cols)+
theme_bw()
cor_table
master_tibble
theta_tibble
#join the 2 nested tibbles
master_tibble <- dynamics.df.all%>%
left_join(theta_tibble)
master_tibble
theta_fundamental
#Calculate correlation by optima distribution, simulation, metric
cor_table <- master_tibble%>%
unnest(theta_metrics)%>%
group_by(optima_distribution, simulation, metric)%>%
summarise(correlation = cor(theta, env_niche_breadth, method = 'spearman'))
cor_table
#Visualize data and summary statistics ----------
library(RColorBrewer)
cols <- brewer.pal(3, name = 'Set1')
cor_table%>%
group_by(optima_distribution, metric)%>%
summarise(mean_correlation = mean(correlation), sd_correlation = sd(correlation))%>%
ggplot(aes(x = metric, y = mean_correlation, col = optima_distribution)) +
geom_bar(aes(fill = optima_distribution), position = position_dodge(), stat = 'identity')+
scale_fill_manual(values = cols)+
theme_bw()
un_saturated_theta
un_saturated_tibble
un_saturated_tibble
unsaturated_theta
unsaturated_theta <- un_saturated_tibble$unaturated%>%
parallel_theta(., metrics = metrics)
unsaturated_theta <- un_saturated_tibble$unaturated%>%
parallel_theta(., metrics = metrics)
unsaturated_theta
un_saturated_tibble
theta_tibble
theta_tibble_all <- un_saturated_tibble%>%
mutate(unsaturated_theta = unsaturated%>%parallel_theta(., metrics = metrics))%>%
mutate(saturated_theta = saturated%>%
parallel_theta(., metrics = metric))
un_saturated_tibble$unaturated
theta_tibble_all <- un_saturated_tibble%>%
mutate(unsaturated_theta = un_saturated_tibble$unsaturated%>%parallel_theta(., metrics = metrics))%>%
mutate(saturated_theta = un_saturated_tibble$saturated%>%
parallel_theta(., metrics = metric))
unsaturated_theta
saturated_theta <- un_saturated_tibble$saturated%>%
parallel_theta(., metrics = metrics)
saturated_theta
stopCluster (cl)
saturated_theta
unsaturated_theta
saturated_theta%>%
length()
unsaturated_theta%>%
length()
theta_tibble_all
un_saturated_tibble
un_saturated_tibble%>%
pivot_longer(cols = c(3,4), names_to = 'saturation')
?pivot_longer
un_saturated_tibble%>%
pivot_longer(cols = c(3,4), names_to = 'saturation', values_to = 'community_matrix')
unsaturated_theta
un_saturated_tibble$unaturated
un_saturated_tibble
un_saturated_tibble%>%
mutate(unsaturated_theta = unsaturated_theta)
un_saturated_tibble%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)
un_saturated_tibble%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = c(3,4), names_to = 'saturation', values_to = 'community_matrix')
un_saturated_tibble%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = c(3,4, 5,6), names_to = 'saturation', values_to = 'community_matrix')
un_saturated_tibble%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)
un_saturated_tibble
un_saturated_tibble <- tibble(optima_distribution = dynamics.df.all$optima_distribution,
simulation = dynamics.df.all$simulation,
unsaturated = lapply(unsaturated_comm, function(x)x$unsaturated)%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x))),
saturated = lapply(unsaturated_comm, function(x)x$saturated)%>%
lapply(function(x)x%>%
rename_all(~paste0('sp', .x))))
un_saturated_tibble
un_saturated_tibble
unsaturated_theta
un_saturated_tibble
theta[,1:2]
un_saturated_tibble
un_saturated_tibble%>%
select(-unsaturated, -saturated)
tibble(saturation = rep('saturated','unsaturated', each = 12))
rep('saturated','unsaturated', each = 12
rep(c('saturated','unsaturated'), each = 12
rep(c('saturated','unsaturated'), each = 12)
tibble(saturation = rep(c('saturated','unsaturated'), each = 12),
theta_table = c(saturated_theta, unsaturated_theta))
un_saturated_tibble%>%
pivot_longer(cols = c(3,4), names_to = 'saturation', values_to = 'community_matrix')
un_saturated_tibble%>%
pivot_longer(cols = c(3,4), names_to = 'saturation', values_to = 'community_matrix')%>%
tibble(saturation = rep(c('saturated','unsaturated'), each = 12),
theta_table = c(saturated_theta, unsaturated_theta))
tibble(saturation = rep(c('saturated','unsaturated'), each = 12),
theta_table = c(saturated_theta, unsaturated_theta))
un_saturated_tibble
un_saturated_tibble%>%
select(-unsaturated, -saturated)
un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)
un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)
un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = 3:4, names_to = 'saturation')
un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = 3:4, names_to = 'saturation', values_to = 'theta_table')
un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = 3:4, names_to = 'saturation', values_to = 'theta_table')%>%
mutate(saturation = plyr::mapvalues(from = 'unsaturated_theta', to = 'unsaturated'))
un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = 3:4, names_to = 'saturation', values_to = 'theta_table')%>%
mutate(saturation = plyr::mapvalues(saturation, from = 'unsaturated_theta', to = 'unsaturated'))
un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = 3:4, names_to = 'saturation', values_to = 'theta_table')%>%
mutate(saturation = plyr::mapvalues(saturation, from = 'unsaturated_theta', to = 'unsaturated'))%>%
mutate(saturation = plyr::mapvalues(saturation, from = 'saturated_theta', to = 'saturated'))
un_saturated_tibble%>%
pivot_longer(cols = c(3,4), names_to = 'saturation', values_to = 'community_matrix')
community_tibble <- un_saturated_tibble%>%
pivot_longer(cols = c(3,4), names_to = 'saturation', values_to = 'community_matrix')
community_tibble
theta_tibble
theta_tibble <- un_saturated_tibble%>%
select(-unsaturated, -saturated)%>%
mutate(unsaturated_theta = unsaturated_theta)%>%
mutate(saturated_theta = saturated_theta)%>%
pivot_longer(cols = 3:4, names_to = 'saturation', values_to = 'theta_table')%>%
mutate(saturation = plyr::mapvalues(saturation, from = 'unsaturated_theta', to = 'unsaturated'))%>%
mutate(saturation = plyr::mapvalues(saturation, from = 'saturated_theta', to = 'saturated'))
theta_tibble
community_tibble
community_theta_tibble <- community_tibble%>%
left_join(theta_tibble)
community_theta_tibble
saveRDS(community_theta_tibble, file = 'theta_tibble.rds')
theta_tibble_all
dynamics.df.all
fundamental
#save simulation data
saveRDS(object = dynamics.df.all, file = 'simulation_data.rds')
fundamental
#Spp paramaters set for simulations
saveRDS(fundamental, file = 'Spp_parameters.rds')
